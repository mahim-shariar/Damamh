import React, { useState } from "react";
import {
  FiPlus,
  FiMinus,
  FiStar,
  FiClock,
  FiTruck,
  FiShield,
} from "react-icons/fi";
import { motion, AnimatePresence } from "framer-motion";

// Optimized animation variants - reduced complexity
const containerVariants = {
  hidden: { opacity: 0 },
  visible: {
    opacity: 1,
    transition: {
      staggerChildren: 0.08, // Reduced stagger for faster loading
    },
  },
};

const itemVariants = {
  hidden: {
    opacity: 0,
    y: 10, // Reduced distance for smoother animation
  },
  visible: {
    opacity: 1,
    y: 0,
    transition: {
      type: "tween", // Changed to tween for smoother performance
      duration: 0.3, // Reduced duration
      ease: "easeOut",
    },
  },
};

const answerVariants = {
  closed: {
    opacity: 0,
    height: 0,
    transition: {
      duration: 0.25,
      ease: "easeInOut",
    },
  },
  open: {
    opacity: 1,
    height: "auto",
    transition: {
      duration: 0.3,
      ease: "easeOut",
    },
  },
};

const iconVariants = {
  closed: { rotate: 0 },
  open: { rotate: 180 },
};

// Simple scroll animation hook
const useScrollAnimation = () => {
  const [isVisible, setIsVisible] = useState(false);

  React.useEffect(() => {
    const observer = new IntersectionObserver(
      ([entry]) => {
        if (entry.isIntersecting) {
          setIsVisible(true);
        }
      },
      {
        threshold: 0.05, // Lower threshold for earlier trigger
        rootMargin: "50px", // Trigger 50px before element enters viewport
      }
    );

    const element = document.getElementById("faq-section");
    if (element) {
      observer.observe(element);
    }

    return () => {
      if (element) {
        observer.unobserve(element);
      }
    };
  }, []);

  return isVisible;
};

// Optimized FAQ Item Component
const FAQItem = React.memo(({ faq, index, isOpen, onClick }) => {
  return (
    <motion.div
      variants={itemVariants}
      className="border border-gray-200 rounded-2xl bg-white/80 backdrop-blur-sm hover:shadow-lg transition-shadow duration-200"
      whileHover={{
        y: -2,
        transition: { duration: 0.15 },
      }}
    >
      <motion.button
        className="w-full px-6 py-4 text-left flex items-center justify-between rounded-2xl"
        onClick={onClick}
        whileTap={{ scale: 0.98 }}
      >
        <div className="flex items-start space-x-3">
          <div className="w-8 h-8 bg-gradient-to-r from-purple-500 to-pink-500 rounded-full flex items-center justify-center flex-shrink-0 mt-1">
            <span className="text-white font-bold text-xs">{index + 1}</span>
          </div>
          <span className="text-base font-semibold text-gray-900">
            {faq.question}
          </span>
        </div>

        <motion.div
          className="w-8 h-8 bg-gradient-to-r from-purple-100 to-pink-100 rounded-full flex items-center justify-center flex-shrink-0"
          variants={iconVariants}
          animate={isOpen ? "open" : "closed"}
          transition={{ duration: 0.2 }}
        >
          {isOpen ? (
            <FiMinus className="text-purple-600 text-sm" />
          ) : (
            <FiPlus className="text-purple-600 text-sm" />
          )}
        </motion.div>
      </motion.button>

      <AnimatePresence>
        {isOpen && (
          <motion.div
            variants={answerVariants}
            initial="closed"
            animate="open"
            exit="closed"
            className="overflow-hidden"
          >
            <div className="px-6 pb-4">
              <div className="border-t border-gray-100 pt-4">
                <p className="text-gray-700 leading-relaxed">{faq.answer}</p>
              </div>
            </div>
          </motion.div>
        )}
      </AnimatePresence>
    </motion.div>
  );
});

FAQItem.displayName = "FAQItem";

// Optimized Price Box Component
const PriceBox = React.memo(() => {
  const features = [
    { icon: FiTruck, text: "‡¶´‡ßç‡¶∞‡¶ø ‡¶°‡ßá‡¶≤‡¶ø‡¶≠‡¶æ‡¶∞‡¶ø" },
    { icon: FiShield, text: "‡ß≠ ‡¶¶‡¶ø‡¶® ‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶®" },
    { icon: FiClock, text: "‡ß®‡ß™/‡ß≠ ‡¶∏‡¶æ‡¶™‡ßã‡¶∞‡ßç‡¶ü" },
    { icon: FiStar, text: "‡¶™‡ßç‡¶∞‡¶ø‡¶Æ‡¶ø‡¶Ø‡¶º‡¶æ‡¶Æ ‡¶ï‡ßã‡¶Ø‡¶º‡¶æ‡¶≤‡¶ø‡¶ü‡¶ø" },
  ];

  const scrollToOrder = () => {
    const orderSection = document.getElementById("order");
    if (orderSection) {
      orderSection.scrollIntoView({
        behavior: "smooth",
        block: "start",
      });
    }
  };

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      whileInView={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.4 }}
      viewport={{ once: true, margin: "-50px" }}
      className="mt-12 bg-gradient-to-r from-green-500 to-emerald-600 rounded-3xl p-6 text-center text-white relative overflow-hidden"
    >
      <div className="flex items-center justify-center space-x-3 mb-4">
        <span className="text-lg line-through opacity-70">‡ß®‡ßØ‡ßØ‡ß¶ ‡¶ü‡¶æ‡¶ï‡¶æ</span>
        <span className="text-3xl font-bold">‡ß®‡ß©‡ßØ‡ß¶ ‡¶ü‡¶æ‡¶ï‡¶æ</span>
      </div>

      <p className="text-base mb-4 font-medium">üéâ ‡¶∏‡ßç‡¶™‡ßá‡¶∂‡¶æ‡¶≤ ‡¶Ö‡¶´‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶æ‡¶á‡¶∏</p>

      <div className="grid grid-cols-2 gap-2 mb-4">
        {features.map((feature, index) => (
          <div
            key={index}
            className="bg-white/20 rounded-lg p-2 flex items-center justify-center space-x-1"
          >
            <feature.icon className="text-white text-sm" />
            <span className="text-xs font-medium">{feature.text}</span>
          </div>
        ))}
      </div>

      <motion.button
        className="bg-white text-green-700 px-6 py-3 rounded-full font-bold text-base w-full max-w-xs hover:shadow-lg transition-shadow duration-200"
        whileHover={{ scale: 1.02 }}
        whileTap={{ scale: 0.98 }}
        onClick={scrollToOrder}
      >
        ‚úÖ ‡¶π‡ßç‡¶Ø‡¶æ‡¶Å, ‡¶Ü‡¶Æ‡¶ø ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶ö‡¶æ‡¶á
      </motion.button>
    </motion.div>
  );
});

PriceBox.displayName = "PriceBox";

const FAQ = () => {
  const [openIndex, setOpenIndex] = useState(0);
  const isVisible = useScrollAnimation();

  const faqs = [
    {
      question: "‡¶ï‡ßã‡¶® ‡¶∏‡¶æ‡¶á‡¶ú‡ßá ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡¶ö‡ßç‡¶õ‡ßá?",
      answer: "‡¶¨‡ßã‡¶∞‡¶ï‡¶æ‡¶ü‡¶ø ‡ß™‡ßÆ, ‡ß´‡ß¶, ‡ß´‡ß®, ‡ß´‡ß™, ‡ß´‡ß¨ ‡¶ì ‡ß´‡ßÆ ‚Äì ‡¶è‡¶á ‡ß¨‡¶ü‡¶ø ‡¶∏‡¶æ‡¶á‡¶ú‡ßá available‡•§",
    },
    {
      question: "Hidden pocket ‡¶Ü‡¶õ‡ßá ‡¶ï‡¶ø?",
      answer:
        "‡¶π‡ßç‡¶Ø‡¶æ‡¶Å, ‡¶Ö‡¶¨‡¶∂‡ßç‡¶Ø‡¶á! ‡¶∏‡¶æ‡¶á‡¶°‡ßá ‡¶ö‡ßá‡¶á‡¶®‡¶∏‡¶π ‡¶è‡¶ï‡¶ü‡¶ø ‡¶ó‡ßã‡¶™‡¶® ‡¶™‡¶ï‡ßá‡¶ü ‡¶Ü‡¶õ‡ßá, ‡¶Ø‡ßá‡¶ñ‡¶æ‡¶®‡ßá ‡¶Æ‡ßã‡¶¨‡¶æ‡¶á‡¶≤ ‡¶¨‡¶æ ‡¶õ‡ßã‡¶ü ‡¶ú‡¶ø‡¶®‡¶ø‡¶∏ ‡¶®‡¶ø‡¶∞‡¶æ‡¶™‡¶¶‡ßá ‡¶∞‡¶æ‡¶ñ‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡¶®‡•§",
    },
    {
      question: "‡¶ï‡¶æ‡¶™‡ßú‡ßá‡¶∞ Quality ‡¶ï‡ßá‡¶Æ‡¶®?",
      answer:
        "Ronjit Super Cherry ‡¶´‡ßç‡¶Ø‡¶æ‡¶¨‡ßç‡¶∞‡¶ø‡¶ï ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá, ‡¶Ø‡¶æ ‡¶Ö‡¶§‡ßç‡¶Ø‡¶®‡ßç‡¶§ ‡¶®‡¶∞‡¶Æ, ‡¶¨‡ßç‡¶∞‡¶ø‡¶¶‡ßá‡¶¨‡¶≤ ‡¶è‡¶¨‡¶Ç ‡¶¶‡ßÄ‡¶∞‡ßç‡¶ò‡¶ï‡ßç‡¶∑‡¶£ ‡¶™‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ü‡¶∞‡¶æ‡¶Æ‡¶¶‡¶æ‡ßü‡¶ï‡•§",
    },
    {
      question: "‡¶°‡ßá‡¶≤‡¶ø‡¶≠‡¶æ‡¶∞‡¶ø ‡¶ï‡¶§ ‡¶¶‡¶ø‡¶®‡ßá ‡¶π‡¶¨‡ßá?",
      answer:
        "‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ confirm ‡¶π‡¶ì‡ßü‡¶æ‡¶∞ ‡¶™‡¶∞ ‡ßß ‡¶•‡ßá‡¶ï‡ßá ‡ß© ‡¶ï‡¶æ‡¶∞‡ßç‡¶Ø‡¶¶‡¶ø‡¶¨‡¶∏‡ßá‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶°‡ßá‡¶≤‡¶ø‡¶≠‡¶æ‡¶∞‡¶ø ‡¶™‡ßá‡ßü‡ßá ‡¶Ø‡¶æ‡¶¨‡ßá‡¶®‡•§",
    },
    {
      question: "‡¶¶‡¶æ‡¶Æ ‡¶ï‡¶§?",
      answer:
        "‡¶™‡ßç‡¶∞‡ßã‡¶°‡¶æ‡¶ï‡ßç‡¶ü‡ßá‡¶∞ Regular Price 2990 ‡¶ü‡¶æ‡¶ï‡¶æ‡•§‰ΩÜÁõÆÂâç ‡¶è‡¶ï‡¶ü‡¶ø ‡¶¨‡¶ø‡¶∂‡ßá‡¶∑ ‡¶Ö‡¶´‡¶æ‡¶∞‡ßá ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ 2390 ‡¶ü‡¶æ‡¶ï‡¶æ‡ßü ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡¶®!",
    },
    {
      question: "‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶™‡¶≤‡¶ø‡¶∏‡¶ø ‡¶ï‡¶ø?",
      answer:
        "‡¶π‡ßç‡¶Ø‡¶æ‡¶Å, ‡ß≠ ‡¶¶‡¶ø‡¶®‡ßá‡¶∞ ‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶™‡¶≤‡¶ø‡¶∏‡¶ø ‡¶Ü‡¶õ‡ßá‡•§ ‡¶Ø‡¶¶‡¶ø ‡¶™‡ßç‡¶∞‡ßã‡¶°‡¶æ‡¶ï‡ßç‡¶ü‡ßá ‡¶ï‡ßã‡¶®‡ßã ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶•‡¶æ‡¶ï‡ßá, ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡¶®‡•§",
    },
  ];

  const toggleFAQ = (index) => {
    setOpenIndex(openIndex === index ? -1 : index);
  };

  return (
    <section
      id="faq"
      id="faq-section"
      className="py-16 bg-gradient-to-br from-purple-50 to-pink-50"
    >
      <div className="container mx-auto px-4">
        <motion.div
          className="text-center mb-12"
          initial={{ opacity: 0, y: 20 }}
          animate={isVisible ? { opacity: 1, y: 0 } : { opacity: 0, y: 20 }}
          transition={{ duration: 0.4 }}
        >
          <h2 className="text-3xl font-bold text-gray-900 mb-3">
            ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞{" "}
            <span className="text-transparent bg-clip-text bg-gradient-to-r from-purple-600 to-pink-600">
              ‡¶ú‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶∏‡¶æ‡¶∞ ‡¶â‡¶§‡ßç‡¶§‡¶∞
            </span>
          </h2>
          <p className="text-lg text-gray-600">‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£‡¶§ ‡¶Ø‡¶æ ‡¶ú‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶∏‡¶æ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü</p>
        </motion.div>

        <div className="max-w-3xl mx-auto">
          <motion.div
            className="space-y-3"
            variants={containerVariants}
            initial="hidden"
            animate={isVisible ? "visible" : "hidden"}
          >
            {faqs.map((faq, index) => (
              <FAQItem
                key={index}
                faq={faq}
                index={index}
                isOpen={openIndex === index}
                onClick={() => toggleFAQ(index)}
              />
            ))}
          </motion.div>

          <PriceBox />
        </div>
      </div>
    </section>
  );
};

export default React.memo(FAQ);
